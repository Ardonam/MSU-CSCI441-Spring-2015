{"name":"CSCI441 - Spring 2015","tagline":"Assignments, labs and notes for CSCI441 Spring semester 2015.","body":"CSCI441 Spring 2015\r\n-------------------\r\n\r\nThis repository is where all your assignments will be provided. You will\r\nimport this repository into your own private bit bucket repository, where you\r\nwill make your additions to the code base. The reason for bit bucket is public \r\nrepositories are free on github, whereas private ones are free on bit bucket.\r\n\r\nI will be adding assignments to this repository throughout the semester so you will need to follow the\r\ninstructions below in order to keep your repository up-to-date, while also being\r\nable to push changes up to your own personal repository.\r\n\r\nImporting to bitbucket.org\r\n--------------------------\r\n\r\nFirst, you'll need a bitbucket account, so [sign up here](https://bitbucket.org/account/signup/).\r\nThen you'll need to import this repository into your own private repository.\r\nStart by going [here](https://bitbucket.org/repo/import). In the URL field, paste\r\nin the url to this repository: \r\n\r\nhttps://github.com/jallwine/MSU-CSCI441-Spring-2015\r\n\r\nOnce the URL field loses focus, the Name field should be filled in. You can change\r\nit if you like, as well as fill in a description. Leave 'This is a private repository'\r\nchecked, so no one else has access to it (it's also free when it's private on bitbucket).\r\nThen click 'Import repository' at the bottom.\r\n\r\nShare your repository\r\n---------------------\r\n\r\nIn order to grade your assignments, I'll need access to your repository. You can\r\ninvite me to your newly created repository on the right-hand side where it says\r\n'Invite users to this repo'. Click the 'Send invitation' button and add the user\r\njallwine. All I need is permission to read your repository (so not write or admin).\r\nThen click 'Share'.\r\n\r\nInstall Git\r\n---------------------\r\n\r\nNow we need to make sure git is installed. There are a number\r\nof git GUI clients, including bitbucket's [SourceTree](https://www.atlassian.com/software/sourcetree/overview),\r\nor [others](http://git-scm.com/downloads/guis).\r\nI'll leave you to figure out your GUI of choice on your own if you like. \r\nI always stick to the command line when I can, so that's what I'll be showing\r\nyou how to do. In a terminal run the following:\r\n\r\n    git --version \r\n\r\nIf you get an error you may need to [download and install git](http://git-scm.com/downloads). \r\nIf you've never used git before you might want to [read up on the docs](http://git-scm.com/doc), \r\nor go through the basics with [Try Git](try.github.com).\r\n\r\nClone your repository\r\n---------------------\r\n\r\nTo download your repository so it's ready for modifications, we need to clone it.\r\nOnce git is installed, run the following command with &lt;repo url&gt; replaced with\r\nthe url to your repository (shown in the upper right of the Overview page on bit bucket).\r\nIt'll look something like https://jallwine@bitbucket.org/jallwine/msu-csci441-spring-2015.git.\r\n\r\n    git clone <repo url>\r\n\r\nIt'll ask for your bit bucket password. You'll have to enter your password every time you\r\nwant to push changes up to bit bucket or pull changes down, unless you set up SSH keys (go to\r\nManage Account in the top right most menu, then under security is SSH keys).\r\n\r\nHow to pull the latest assignments\r\n----------------------------------\r\n\r\nI'll be adding assignments here throughout the semester so you'll need to add\r\nthis repository as a remote that you can pull changes from. Make sure you cd into\r\nyour repository, something like (depending on what you named it):\r\n\r\n    cd msu-csci441-spring-2015\r\n\r\nThen let's list what remotes we currently have:\r\n\r\n    git remote -v\r\n\r\nYou should see two entries for your bit bucket repository, one (fetch) and one (push). When\r\nyou use `git push` or `git pull`, by default you'll push or pull to/from that url. We want to\r\nadd another entry that we can explicitly pull from to merge in assignments as I add them. To\r\ndo that, run the following:\r\n\r\n    git remote add csci441 https://github.com/jallwine/MSU-CSCI441-Spring-2015.git\r\n\r\nNow if you run the `git remote -v` command you'll see two addition entries. You won't have permission\r\nto push to this one, but you will be able to pull new assignments by running the following:\r\n\r\n    git pull csci441 master\r\n\r\nInstall Qt\r\n----------\r\n\r\nAll assignments and labs will be written in C++ using OpenGL and Qt. Qt is a cross platform\r\nUI framework. There are both commercial and open source licenses for Qt.  We'll be using the \r\nopen source version, which can be downloaded [here](http://www.qt.io/download-open-source/).\r\nFollow the instructions for installation on your platform.\r\n\r\nBuild Lab 1\r\n-----------\r\n\r\nOnce you have Qt installed, try compiling and running the provided lab 1 code. Qt projects\r\nare organized using project files (.pro files). The qt command `qmake` can generate a Makefile\r\n(or an Xcode project, or a Visual Studio project). I like to stick to using a Makefile so I can\r\nstay in a terminal:  \r\n\r\n    cd lab1\r\n    qmake\r\n    make\r\n    ./lab1\r\n\r\n    Windows users:\r\n    cd lab1\r\n    qmake\r\n    mingw32-make\r\n    cd release\r\n    lab1.exe\r\n\r\nIt should print \"Output triangle.jpg\" to the terminal and triangle.jpg should be a blank, black image (it's\r\nyour job to make it output a triangle). On the lab computers (in EPS 254, and others), multiple versions of qt are \r\ninstalled on Fedora. To use the right version of qmake use `qmake-qt5`.\r\n\r\nHow To Submit Your Work\r\n-----------------------\r\n\r\nOnce you start making changes to your code, you'll want to commit those changes and push them back up\r\nto the server. For every file you've changed or created, you'll want to run `git add <file name>`. This\r\nstages the file for commit. You can think of staging a file as flagging that you want to save it in your\r\nnext commit. Once you've staged every file that you want to commit type:\r\n\r\n    git commit -m \"a short description of what you're committing\"\r\n\r\nIt can be handy to see what files have been changed. To see what changes have been made you can \r\nuse `git status`. `git status` will show you which files you've modified, which files are new \r\nand which files have been staged for commit. \r\n\r\nYou can commit as many times as you want locally. When you're ready to submit all your commits up to the\r\nserver, where I can see them, run:\r\n\r\n    git push \r\n\r\nNow your changes are all on bitbucket where I can see them. Be sure to include everything necessary\r\nto build and run your code! I recommend cloning your repository to another location (perhaps on the\r\nlab machines) and building it to make sure you've remembered to include everything. **If I am unable\r\nto build and run your program, you will be docked points, so be sure it runs on the lab computers\r\nfrom a clean checkout!**\r\n\r\nFor labs, be sure to push your changes up\r\nbefore demoing the lab to me in class. For programs, make sure your code is pushed before the deadline.\r\nOne thing to be careful of is to not commit files that are generated by the build process (i.e. the\r\nMakefile, the final executable, .o files, etc.). I've included a .gitignore file in the reposiotry that will\r\nignore most files that will be generated by your build processes, but you'll want to keep that in mind.\r\n\r\nIf you've cloned your repository in more than one location and have made changes to one of them and pushed\r\nthose changes up to the server, you can use `git pull` from the other location to bring it up to date.\r\n\r\nMore Git Basics\r\n---------------\r\n\r\nGit is a distributed version control system (VCS). When you cloned the repository above, you downloaded\r\nevery change that has ever been made to the repository. You can see each individual change by running the \r\nfollowing:\r\n\r\n    git log\r\n\r\nYou'll see a list of commits, which are changes to a set of files in your repository. Each commit looks\r\nsomething like this (this is the first commit to your repository, made by me):\r\n\r\n    commit 64b2f40ee1bfe685a301bbf912aeb87b46e5ca28\r\n    Author: John Allwine <jallwine86@gmail.com>\r\n    Date:   Sat Dec 27 16:49:04 2014 -0700\r\n\r\n        added lab1\r\n\r\nThe first line shows the hash value for the commit. If you ever want to revert back to a specific commit\r\nyou can use `git checkout <hash value>`. In your repository, you can type the following to get to the very\r\nfirst change ever made:\r\n\r\n    git checkout 64b2f40ee1bfe685a301bbf912aeb87b46e5ca28\r\n\r\nTo get back to the lastest, you can run:\r\n\r\n    git checkout master\r\n\r\nFor a more fully featured git cheat sheet go [here](https://training.github.com/kit/downloads/github-git-cheat-sheet.pdf).\r\nThe official git documentation is [here](http://git-scm.com/doc).\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}